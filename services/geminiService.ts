import { GoogleGenAI, Modality } from "@google/genai";

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

const buildPrompt = (productName: string, productDescription: string): string => {
  const descriptionText = productDescription 
    ? `\n\n**Product Description:**\n${productDescription}` 
    : '';

  return `
**Your Task: Photorealistic Product Compositing**

You will be given two images:
1. An image of a product, '${productName}'.
2. An image of a bowl with studio lighting.
${descriptionText}

**Your only goal is to realistically place the product from the first image into the bowl from the second image.**

**CRITICAL INSTRUCTIONS (DO NOT DEVIATE):**

1.  **PRESERVE THE PRODUCT:** You **MUST NOT** change the appearance of the product. It must look exactly like it does in the source image. Do not alter its color, texture, shape, or any other visual characteristic. Use the optional description to better understand the product if needed, but the source image is the ground truth.
2.  **SEAMLESS INTEGRATION:** Place the product inside the bowl. The final image must be photorealistic.
3.  **MATCH LIGHTING & SHADOWS:** The lighting and shadows on the product must perfectly match the existing studio lighting on the bowl. The product should cast realistic shadows inside the bowl.
4.  **DO NOT CHANGE THE BOWL:** The bowl image is the master template. Do not alter it in any way.
5.  **MAINTAIN BACKGROUND:** The final image must have a pure, solid white (#FFFFFF) background, consistent with the bowl image.

**Final Output:**
A single, high-resolution PNG image with a 1:1 aspect ratio. The image should be a seamless, photorealistic composition of the original product inside the original bowl.
  `;
};


export const generateProductPhotoFromImage = async (
    productImageData: {mimeType: string, data: string},
    bowlImageData: {mimeType: string, data: string},
    productName: string,
    productDescription: string
  ): Promise<string> => {
  const prompt = buildPrompt(productName, productDescription);

  const bowlImagePart = {
    inlineData: {
      mimeType: bowlImageData.mimeType,
      data: bowlImageData.data,
    },
  };
  
  const productImagePart = {
    inlineData: {
      mimeType: productImageData.mimeType,
      data: productImageData.data,
    },
  };

  const textPart = {
    text: prompt,
  };

  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image-preview',
      contents: {
        parts: [bowlImagePart, productImagePart, textPart],
      },
      config: {
        responseModalities: [Modality.IMAGE, Modality.TEXT],
      },
    });

    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData) {
        const base64ImageBytes = part.inlineData.data;
        return `data:${part.inlineData.mimeType};base64,${base64ImageBytes}`;
      }
    }
    
    // If no image part is found
    throw new Error("No image was generated by the API.");

  } catch (error) {
    console.error("Error calling Gemini API:", error);
    throw new Error("Failed to generate image from Gemini API.");
  }
};